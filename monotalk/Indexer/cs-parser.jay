%{
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Radek Doulik    (rodo@matfyz.cz)
//
// Licensed under the terms of the GNU GPL
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2003 Radek Doulik

using System.Text;
using System.IO;
using System;

namespace Monotalk.CSharp
{
	using System.Collections;
	using Monotalk.Languages;
	using Monotalk.Indexer;

	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser : GenericParser
	{

		Stack Namespaces;
		string Namespace;

		Stack Types;
		string type;

		Stack Rows;

		SourceDB db;
		int fileID;

		bool modStatic;
%}

%token EOF
%token NONE   /* This token is never returned by our lexer */
%token ERROR		// This is used not by the parser, but by the tokenizer.
			// do not remove.

/*
 *These are the C# keywords
 */
%token ABSTRACT	
%token AS
%token ADD
%token ASSEMBLY
%token BASE	
%token BOOL	
%token BREAK	
%token BYTE	
%token CASE	
%token CATCH	
%token CHAR	
%token CHECKED	
%token <TokenValue> CLASS	
%token CONST	
%token CONTINUE	
%token DECIMAL	
%token DEFAULT	
%token DELEGATE	
%token DO	
%token DOUBLE	
%token ELSE	
%token ENUM	
%token EVENT	
%token EXPLICIT	
%token EXTERN	
%token FALSE	
%token FINALLY	
%token FIXED	
%token FLOAT	
%token FOR	
%token FOREACH	
%token GOTO	
%token IF	
%token IMPLICIT	
%token IN	
%token <TokenValue> INT	
%token INTERFACE
%token INTERNAL	
%token IS	
%token LOCK	
%token LONG	
%token NAMESPACE
%token NEW	
%token NULL	
%token OBJECT	
%token OPERATOR	
%token OUT	
%token OVERRIDE	
%token PARAMS	
%token PRIVATE	
%token PROTECTED
%token PUBLIC	
%token READONLY	
%token REF	
%token RETURN	
%token REMOVE
%token SBYTE	
%token SEALED	
%token SHORT	
%token SIZEOF	
%token STACKALLOC
%token STATIC	
%token STRING	
%token STRUCT	
%token SWITCH	
%token THIS	
%token THROW	
%token TRUE	
%token TRY	
%token TYPEOF	
%token UINT	
%token ULONG	
%token UNCHECKED
%token UNSAFE	
%token USHORT	
%token USING	
%token VIRTUAL	
%token <TokenValue> VOID	
%token VOLATILE
%token WHILE	

/* simple tokens defined in tokenizer because we need position info for them */
%token <TokenValue> OPEN_BRACE
%token <TokenValue> CLOSE_BRACE
%token <TokenValue> OPEN_PARENS
%token <TokenValue> CLOSE_PARENS
%token <TokenValue> OPEN_BRACKET
%token <TokenValue> CLOSE_BRACKET
%token <TokenValue> SEMICOLON
%token <TokenValue> COLON

/* C# keywords which are not really keywords */
%token GET           "get"
%token SET           "set"

/* C# single character operators/punctuation. */
%token DOT           "."
%token COMMA         ","
%token TILDE         "~"

%token PLUS           "+"
%token MINUS          "-"
%token BANG           "!"
%token ASSIGN         "="
%token OP_LT          "<"
%token OP_GT          ">"
%token BITWISE_AND    "&"
%token BITWISE_OR     "|"
%token STAR           "*"
%token PERCENT        "%"
%token DIV            "/"
%token CARRET         "^"
%token INTERR         "?"

/* C# multi-character operators. */
%token OP_INC                 "++"
%token OP_DEC                 "--"
%token OP_SHIFT_LEFT          "<<"
%token OP_SHIFT_RIGHT         ">>"
%token OP_LE                  "<="
%token OP_GE                  ">="
%token OP_EQ                  "=="
%token OP_NE                  "!="
%token OP_AND                 "&&"
%token OP_OR                  "||"
%token OP_MULT_ASSIGN         "*="
%token OP_DIV_ASSIGN          "/="
%token OP_MOD_ASSIGN          "%="
%token OP_ADD_ASSIGN          "+="
%token OP_SUB_ASSIGN          "-="
%token OP_SHIFT_LEFT_ASSIGN   "<<="
%token OP_SHIFT_RIGHT_ASSIGN  ">>="
%token OP_AND_ASSIGN          "&="
%token OP_XOR_ASSIGN          "^="
%token OP_OR_ASSIGN           "|="
%token OP_PTR                 "->"

/* Numbers */
%token LITERAL_INTEGER           "int literal"
%token LITERAL_FLOAT             "float literal"
%token LITERAL_DOUBLE            "double literal"
%token LITERAL_DECIMAL           "decimal literal"
%token LITERAL_CHARACTER         "character literal"
%token LITERAL_STRING            "string literal"

%token <TokenValue> IDENTIFIER

/* Add precedence rules to solve dangling else s/r conflict */
%nonassoc LOWPREC
%nonassoc IF
%nonassoc ELSE
%right ASSIGN
%left OP_OR
%left OP_AND
%left BITWISE_OR
%left BITWISE_AND
%left OP_SHIFT_LEFT OP_SHIFT_RIGHT
%left PLUS MINUS
%left STAR DIV PERCENT
%right BANG CARRET UMINUS
%nonassoc OP_INC OP_DEC
%left OPEN_PARENS
%left OPEN_BRACKET OPEN_BRACE
%left DOT
%nonassoc HIGHPREC

/* type non terminals to avoid casting */
%type <TokenValue> attribute_section attribute_sections builtin_types class_body constructor_body constructor_declaration constructor_declarator dim_separators fixed_parameter fixed_parameters formal_parameter_list integral_type method_body method_header member_name modifier modifiers opt_attributes opt_constructor_initializer opt_dim_separators opt_modifiers opt_formal_parameter_list opt_rank_specifier opt_semicolon qualified_identifier parameter_array rank_specifier rank_specifiers type variable_declarator variable_declarators variable_initializer
%start compilation_unit
%%

compilation_unit
        : outer_declarations opt_EOF
        | outer_declarations attribute_sections opt_EOF
        | attribute_sections opt_EOF
	| opt_EOF /* allow empty files */
        ;
	
opt_EOF
	: /* empty */
	| EOF
	;

outer_declarations
        : outer_declaration
        | outer_declarations outer_declaration
        ;
 
outer_declaration
        : using_directive
        | namespace_member_declaration
        ;
  
using_directives
	: using_directive 
	| using_directives using_directive
	;

using_directive
	: using_alias_directive
	| using_namespace_directive
	;

using_alias_directive
	: USING IDENTIFIER ASSIGN 
	  namespace_or_type_name SEMICOLON
	;

using_namespace_directive
	: USING namespace_name SEMICOLON 
	;

//
// Strictly speaking, namespaces don't have attributes but
// we parse global attributes along with namespace declarations and then
// detach them
// 
namespace_declaration
	: opt_attributes NAMESPACE qualified_identifier
	  {
		  Namespace = Namespace + (Namespace.Length > 0 ? "." : "") + $3.val.s;
		  Namespaces.Push ($3.val.s.Length);
          }
	  namespace_body opt_semicolon
	  {
		  int idx = (int) Namespaces.Pop ();
		  Namespace = Namespace.Remove (Namespace.Length - idx, idx);
	  }
	;

opt_semicolon
        : { $$ = new TokenValue (); }
	| SEMICOLON
	;

opt_comma
	: /* empty */
	| COMMA
	;

qualified_identifier
	: IDENTIFIER
	| qualified_identifier DOT IDENTIFIER {
	        $<TokenValue>$.val = $1.val.s + "." + $3.val.s; }
	;


namespace_name
	: namespace_or_type_name
	;

namespace_body
	: OPEN_BRACE
	  opt_using_directives
	  opt_namespace_member_declarations
	  CLOSE_BRACE
	  {
	  }
	;

opt_using_directives
	: /* empty */
	| using_directives
	;

opt_namespace_member_declarations
	: /* empty */
	| namespace_member_declarations
	;

namespace_member_declarations
	: namespace_member_declaration
	| namespace_member_declarations namespace_member_declaration
	;

namespace_member_declaration
	: type_declaration
	| namespace_declaration
	;

type_declaration
	: class_declaration
	| struct_declaration		
	| interface_declaration		
	| enum_declaration		
	| delegate_declaration
//
// Enable this when we have handled all errors, because this acts as a generic fallback
//
//	| error {
//		Report.Error (1518, lexer.Location, "Expected class, struct, interface, enum or delegate");
//	  }
	;

//
// Attributes 17.2
//

opt_attributes
        : /* empty */ { $$ = new TokenValue (); }
	| attribute_sections
        ;
 
attribute_sections
	: attribute_section
	| attribute_sections attribute_section
          {
		  $1.Update ($2);
	  }
	;

attribute_section
	: OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET
          {
		  $1.Update ($5);
	  }
        | OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET
          {
		  $1.Update ($4);
	  }
	;
 
attribute_target_specifier
	: attribute_target COLON
	  {
		$$ = $1;
	  }
	;

attribute_target
	: IDENTIFIER
	  {
		$$ = $1;
	  }
        | EVENT  { $$ = "event"; }	  
        | RETURN { $$ = "return"; }
	;

attribute_list
	: attribute
	| attribute_list COMMA attribute
	;

attribute
	: attribute_name
	  opt_attribute_arguments
	;

attribute_name
	: type_name  { /* reserved attribute name or identifier: 17.4 */ }
	;

opt_attribute_arguments
	: /* empty */   { $$ = null; }
	| OPEN_PARENS attribute_arguments CLOSE_PARENS
	;


attribute_arguments
	: opt_positional_argument_list
        | positional_argument_list COMMA named_argument_list
        | named_argument_list
        ;


opt_positional_argument_list
	: /* empty */ 		{ $$ = null; } 
	| positional_argument_list
	;

positional_argument_list
	: expression
        | positional_argument_list COMMA expression
        ;

named_argument_list
	: named_argument
        | named_argument_list COMMA named_argument
        ;

named_argument
	: IDENTIFIER ASSIGN expression
	;

		  
class_body
	: OPEN_BRACE opt_class_member_declarations CLOSE_BRACE
          {
		  $1.Update ($3);
	  }
	;

opt_class_member_declarations
	: /* empty */
	| class_member_declarations
	;

class_member_declarations
	: class_member_declaration
	| class_member_declarations 
	  class_member_declaration
	;

class_member_declaration
	: constant_declaration			// done
	| field_declaration			// done
	| method_declaration			// done
	| property_declaration			// done
	| event_declaration			// done
	| indexer_declaration			// done
	| operator_declaration			// done
	| constructor_declaration		// done
	| destructor_declaration		// done
	| type_declaration
	;

struct_declaration
	: opt_attributes
	  opt_modifiers
	  STRUCT IDENTIFIER
	  opt_class_base
	  struct_body
	  opt_semicolon
	;

struct_body
	: OPEN_BRACE opt_struct_member_declarations CLOSE_BRACE
	;

opt_struct_member_declarations
	: /* empty */
	| struct_member_declarations
	;

struct_member_declarations
	: struct_member_declaration
	| struct_member_declarations struct_member_declaration
	;

struct_member_declaration
	: constant_declaration
	| field_declaration
	| method_declaration
	| property_declaration
	| event_declaration
	| indexer_declaration
	| operator_declaration
	| constructor_declaration
	| type_declaration

	/*
	 * This is only included so we can flag error 575: 
	 * destructors only allowed on class types
	 */
	| destructor_declaration 
	;

constant_declaration
	: opt_attributes 
	  opt_modifiers
	  CONST
	  type
	  constant_declarators
	  SEMICOLON
	;

constant_declarators
	: constant_declarator 
	| constant_declarators COMMA constant_declarator
	;

constant_declarator
	: IDENTIFIER ASSIGN constant_expression
	;

field_declaration
	: opt_attributes
	  opt_modifiers
	  type 
	  variable_declarators
	  SEMICOLON
          {
		  $1.Update ($2);
		  $1.Update ($3);
		  $1.Update ($5);
		  //Console.WriteLine ("fi {0}", $2);
		  foreach (string name in $4.val.s.Split (','))
		          db.AddMember (Namespace, type, name, new Part (fileID, $1));
	  }
	;

variable_declarators
	: variable_declarator 
	| variable_declarators COMMA variable_declarator
          {
		  $1.Update ($3, $1.val.s + "," + $3.val.s);
	  }
	;

variable_declarator
	: IDENTIFIER ASSIGN variable_initializer
          {
		  $1.Update ($3);
	  }
	| IDENTIFIER
	;

variable_initializer
	: expression
	| array_initializer
	| STACKALLOC type OPEN_BRACKET expression CLOSE_BRACKET
	;

method_declaration
	: method_header
	  method_body
	  {
		  $1.Update ($2);
		  db.AddMember (Namespace, type, $1, new Part (fileID, $1));
	  }
	;

opt_error_modifier
	: /* empty */
	| modifiers 
	;

method_header
	: opt_attributes
	  opt_modifiers
	  type
	  member_name
	  OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS 
        {
		$1.Update ($2);
		$1.Update ($3);
		$1.Update ($7, $4.val.s + " (" + $6.val.s + "), " + $3.val.s);
	}
	| opt_attributes
	  opt_modifiers
	  VOID
	  member_name
	  OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS 
        {
		$1.Update ($2);
		$1.Update ($3);
		$1.Update ($7, $4.val.s + " (" + $6.val.s + "), void");
	}
	;

method_body
	: block
	| SEMICOLON
	;

opt_formal_parameter_list
	: /* empty */ { $$ = new TokenValue (); }
	| formal_parameter_list
	;

formal_parameter_list
	: fixed_parameters
	| fixed_parameters COMMA parameter_array { $<TokenValue>$.val = $1.val.s + ", " + $3.val.s; }
	| parameter_array
	;

fixed_parameters
	: fixed_parameter
	| fixed_parameters COMMA fixed_parameter { $<TokenValue>$.val = $1.val.s + ", " + $3.val.s; }
	;

fixed_parameter
	: opt_attributes
	  opt_parameter_modifier
	  type
	  IDENTIFIER
        {
		$<TokenValue>$.val = $3.val.s + " " + $4.val.s;
	}
	;

opt_parameter_modifier
	: /* empty */ { $$ = new TokenValue (); }
	| parameter_modifier
	;

parameter_modifier
	: REF
	| OUT
	;

parameter_array
	: opt_attributes PARAMS type IDENTIFIER
	;

member_name 
	: qualified_identifier
	;

property_declaration
	: opt_attributes
	  opt_modifiers
	  type
	  member_name
          {
		  Rows.Push (lexer.Location.Row);
	  }
	  OPEN_BRACE 
	  {
		lexer.PropertyParsing = true;
	  }
	  accessor_declarations 
	  {
		lexer.PropertyParsing = false;
	  }
	  CLOSE_BRACE
	  {
		  db.AddMember (Namespace, type, $3.val.s + " " + $4.val.s, new Part (fileID, (int) Rows.Pop (), lexer.Location.Row));
	  }
	;

accessor_declarations
	: get_accessor_declaration opt_set_accessor_declaration
	| set_accessor_declaration opt_get_accessor_declaration
	;

opt_get_accessor_declaration
	: /* empty */			{ $$ = null; }
	| get_accessor_declaration
	;

opt_set_accessor_declaration
	: /* empty */			{ $$ = null; }
	| set_accessor_declaration
	;

get_accessor_declaration
	: opt_attributes GET
          {
		lexer.PropertyParsing = false;
	  }
          accessor_body
	  {
		lexer.PropertyParsing = true;
	  }
	;

set_accessor_declaration
	: opt_attributes SET 
          {
		lexer.PropertyParsing = false;
	  }
	  accessor_body
	  {
		lexer.PropertyParsing = true;
	  }
	;

accessor_body
	: block 
	| SEMICOLON		{ $$ = null; }
	;

interface_declaration
	: opt_attributes
	  opt_modifiers
	  INTERFACE IDENTIFIER
	  opt_interface_base
	  interface_body opt_semicolon
	;

opt_interface_base
	: /* empty */			  { $$ = null; }
	| interface_base
	;

interface_base
	: COLON interface_type_list	  { $$ = $2; }
	;

interface_type_list
	: interface_type
	| interface_type_list COMMA interface_type
	;

interface_body
	: OPEN_BRACE
	  opt_interface_member_declarations
	  CLOSE_BRACE
	;

opt_interface_member_declarations
	: /* empty */
	| interface_member_declarations
	;

interface_member_declarations
	: interface_member_declaration
	| interface_member_declarations interface_member_declaration
	;

interface_member_declaration
	: interface_method_declaration		
	| interface_property_declaration	
	| interface_event_declaration 
	| interface_indexer_declaration
	;

opt_new
	: /* empty */	{ $$ = false; }
	| NEW		{ $$ = true; }
	;

interface_method_declaration
	: opt_attributes opt_new type IDENTIFIER 
	  OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS
	  SEMICOLON
	| opt_attributes opt_new VOID IDENTIFIER 
	  OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS
	  SEMICOLON
	;

interface_property_declaration
	: opt_attributes
	  opt_new
	  type IDENTIFIER 
	  OPEN_BRACE 
	  { lexer.PropertyParsing = true; }
	  interface_accesors 
	  { lexer.PropertyParsing = false; }
	  CLOSE_BRACE
	;

interface_accesors
	: opt_attributes GET SEMICOLON		{ $$ = 1; }
	| opt_attributes SET SEMICOLON		{ $$ = 2; }
	| opt_attributes GET SEMICOLON opt_attributes SET SEMICOLON 
	  { $$ = 3; }
	| opt_attributes SET SEMICOLON opt_attributes GET SEMICOLON
	  { $$ = 3; }
	;

interface_event_declaration
	: opt_attributes opt_new EVENT type IDENTIFIER SEMICOLON
	;

interface_indexer_declaration 
	: opt_attributes opt_new type THIS 
	  OPEN_BRACKET formal_parameter_list CLOSE_BRACKET
	  OPEN_BRACE 
	  { lexer.PropertyParsing = true; }
	  interface_accesors 
	  { lexer.PropertyParsing = false; }
	  CLOSE_BRACE
	;

operator_declaration
	: opt_attributes opt_modifiers operator_declarator operator_body
	;

operator_body 
	: block
	| SEMICOLON { $$ = null; }
	; 
operator_declarator
	: type OPERATOR overloadable_operator 
	  OPEN_PARENS type IDENTIFIER CLOSE_PARENS
	| type OPERATOR overloadable_operator
	  OPEN_PARENS 
		type IDENTIFIER COMMA
	  	type IDENTIFIER 
	  CLOSE_PARENS
	| conversion_operator_declarator
	;

overloadable_operator
// Unary operators:
	: BANG
        | TILDE
        | OP_INC
        | OP_DEC
        | TRUE
        | FALSE
// Unary and binary:
        | PLUS
        | MINUS
// Binary:
        | STAR
        | DIV
        | PERCENT
        | BITWISE_AND
        | BITWISE_OR
        | CARRET
        | OP_SHIFT_LEFT
        | OP_SHIFT_RIGHT
        | OP_EQ
        | OP_NE
        | OP_GT
        | OP_LT
        | OP_GE
        | OP_LE
	;

conversion_operator_declarator
	: IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS
	| EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS
	| IMPLICIT error 
	| EXPLICIT error 
	;

constructor_declaration
	: opt_attributes
	  opt_modifiers
	  constructor_declarator
	  constructor_body
	  {
		  $1.Update ($2);
		  $1.Update ($3);
		  $1.Update ($4);
		  db.AddMember (Namespace, type, $3, new Part (fileID, $1));
	  }
	;

constructor_declarator
	  : IDENTIFIER
	  OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS 
	  opt_constructor_initializer
          {
		  $1.Update ($4);
		  $1.Update ($5, (modStatic ? ".cctor" : ".ctor") + " (" + $3.val.s + ")");
	  }
	;

constructor_body
	: block
	| SEMICOLON
	;

opt_constructor_initializer
	: /* empty */			{ $$ = new TokenValue (); }
	| constructor_initializer
	;

constructor_initializer
	: COLON BASE OPEN_PARENS opt_argument_list CLOSE_PARENS
          {
		  $1.Update ($5);
	  }
	| COLON THIS OPEN_PARENS opt_argument_list CLOSE_PARENS
          {
		  $1.Update ($5);
	  }
	;

destructor_declaration
	: opt_attributes TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS block
	;

event_declaration
	: opt_attributes
	  opt_modifiers
	  EVENT type variable_declarators SEMICOLON
	| opt_attributes
	  opt_modifiers
	  EVENT type member_name
	  OPEN_BRACE
	  {
		lexer.EventParsing = true;
	  }
	  event_accessor_declarations
	  {
		lexer.EventParsing = false;  
	  }
	  CLOSE_BRACE
	;

event_accessor_declarations
	: add_accessor_declaration remove_accessor_declaration
	| remove_accessor_declaration add_accessor_declaration
	;

add_accessor_declaration
	: opt_attributes ADD
	  {
		lexer.EventParsing = false;
	  }
          block
	  {
		lexer.EventParsing = true;
	  }
	;

remove_accessor_declaration
	: opt_attributes REMOVE
	  {
		lexer.EventParsing = false;
	  }
          block
	  {
		lexer.EventParsing = true;
	  }
	;

indexer_declaration
	: opt_attributes opt_modifiers indexer_declarator 
	  OPEN_BRACE 
	  {
		lexer.PropertyParsing = true;
	  }
          accessor_declarations 
	  {
		  lexer.PropertyParsing = false;
	  }
	  CLOSE_BRACE
	;

indexer_declarator
	: type THIS OPEN_BRACKET opt_formal_parameter_list CLOSE_BRACKET
	| type qualified_identifier DOT THIS OPEN_BRACKET opt_formal_parameter_list CLOSE_BRACKET
	;

enum_declaration
	: opt_attributes
	  opt_modifiers
	  ENUM IDENTIFIER 
	  opt_enum_base
	  enum_body
	  opt_semicolon
	;

opt_enum_base
	: /* empty */
	| COLON type
	;

enum_body
	: OPEN_BRACE opt_enum_member_declarations CLOSE_BRACE
	;

opt_enum_member_declarations
	: /* empty */
	| enum_member_declarations opt_comma
	;

enum_member_declarations
	: enum_member_declaration 
	| enum_member_declarations COMMA enum_member_declaration
	;

enum_member_declaration
	: opt_attributes IDENTIFIER 
	| opt_attributes IDENTIFIER
          ASSIGN expression
	;

delegate_declaration
	: opt_attributes
	  opt_modifiers
	  DELEGATE type	  
	  IDENTIFIER OPEN_PARENS 
	  opt_formal_parameter_list
	  CLOSE_PARENS 
	  SEMICOLON
	| opt_attributes
	  opt_modifiers
	  DELEGATE VOID	  
	  IDENTIFIER OPEN_PARENS 
	  opt_formal_parameter_list
	  CLOSE_PARENS 
	  SEMICOLON
	;

type_name
	: namespace_or_type_name
	;

namespace_or_type_name
	: qualified_identifier
	;

/* 
 * Before you think of adding a return_type, notice that we have been
 * using two rules in the places where it matters (one rule using type
 * and another identical one that uses VOID as the return type).  This
 * gets rid of a shift/reduce couple
 */
type
	: type_name
	| builtin_types
	| array_type
	| pointer_type
	;


pointer_type
	: type STAR
	| VOID STAR
	;

non_expression_type
	: builtin_types	
	| non_expression_type rank_specifier
	| non_expression_type STAR
	| expression rank_specifiers 
	| expression STAR 
	
	//
	// We need this because the parser will happily go and reduce IDENTIFIER STAR
	// through this different path
	//
	| multiplicative_expression STAR 
	;

type_list
	: type
	| type_list COMMA type
	;

/*
 * replaces all the productions for isolating the various
 * simple types, but we need this to reuse it easily in local_variable_type
 */
builtin_types
	: OBJECT
	| STRING
	| BOOL
	| DECIMAL
	| FLOAT
	| DOUBLE
	| integral_type
	;

integral_type
	: SBYTE
	| BYTE
	| SHORT
	| USHORT
	| INT
	| UINT
	| LONG
	| ULONG
	| CHAR
	| VOID
	;

interface_type
	: type_name
	;

array_type
	: type rank_specifiers { $<TokenValue>$.val = $1.val.s + $2.val.s; }
	;

//
// Expressions, section 7.5
//
primary_expression
	: literal
 
	| qualified_identifier
	| parenthesized_expression
	| member_access
	| invocation_expression
	| element_access
	| this_access
	| base_access
	| post_increment_expression
	| post_decrement_expression
	| new_expression
	| typeof_expression
	| sizeof_expression
	| checked_expression
	| unchecked_expression
	| pointer_member_access
	;

literal
	: boolean_literal
	| integer_literal
	| real_literal
	| LITERAL_CHARACTER
	| LITERAL_STRING
	| NULL
	;

real_literal
	: LITERAL_FLOAT
	| LITERAL_DOUBLE
	| LITERAL_DECIMAL
	;

integer_literal
	: LITERAL_INTEGER
	;

boolean_literal
	: TRUE
	| FALSE
	;

parenthesized_expression
	: OPEN_PARENS expression CLOSE_PARENS
	;

member_access
	: primary_expression DOT IDENTIFIER
	| predefined_type DOT IDENTIFIER
	;

predefined_type
	: builtin_types
	;

invocation_expression
	: primary_expression OPEN_PARENS opt_argument_list CLOSE_PARENS
	; 

opt_argument_list
	: /* empty */		{ $$ = null; }
	| argument_list
	;

argument_list
	: argument		
	| argument_list COMMA argument
	;

argument
	: expression
	| REF variable_reference 
	| OUT variable_reference 
	;

variable_reference
	: expression { note ("section 5.4"); $$ = $1; }
	;

element_access
	: primary_expression OPEN_BRACKET expression_list CLOSE_BRACKET	
	| primary_expression rank_specifiers
	;

expression_list
	: expression
	| expression_list COMMA expression
	;

this_access
	: THIS
	;

base_access
	: BASE DOT IDENTIFIER
	| BASE OPEN_BRACKET expression_list CLOSE_BRACKET
	;

post_increment_expression
	: primary_expression OP_INC
	;

post_decrement_expression
	: primary_expression OP_DEC
	;

new_expression
	: object_or_delegate_creation_expression
	| array_creation_expression
	;

object_or_delegate_creation_expression
	: NEW type OPEN_PARENS opt_argument_list CLOSE_PARENS
	;

array_creation_expression
	: NEW type OPEN_BRACKET expression_list CLOSE_BRACKET 
	  opt_rank_specifier
	  opt_array_initializer
	| NEW type rank_specifiers array_initializer
	| NEW type error 
	;

opt_rank_specifier
	: /* empty */ { $$ = new TokenValue (); }
	| rank_specifiers
	;

rank_specifiers
	: rank_specifier opt_rank_specifier
	  {
		  $<TokenValue>$.val = $2.val.s + $1.val.s;
	  }
        ;

rank_specifier
	: OPEN_BRACKET opt_dim_separators CLOSE_BRACKET
	  {
		  $<TokenValue>$.val.s = "[" + $2.val.s + "]";
	  }
	;

opt_dim_separators
	: /* empty */          { $$ = new TokenValue (); }
	| dim_separators
	;

dim_separators
	: COMMA { $<TokenValue>$.val = ","; }
	| dim_separators COMMA
	  {
		$<TokenValue>$.val = $1.val.s + ",";
	  }
	;

opt_array_initializer
	: /* empty */
        | array_initializer
	;

array_initializer
	: OPEN_BRACE CLOSE_BRACE
	| OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE
	;

variable_initializer_list
	: variable_initializer
	| variable_initializer_list COMMA variable_initializer
	;

typeof_expression
	: TYPEOF OPEN_PARENS type CLOSE_PARENS
	;

sizeof_expression
	: SIZEOF OPEN_PARENS type CLOSE_PARENS
	;

checked_expression
	: CHECKED OPEN_PARENS expression CLOSE_PARENS
	;

unchecked_expression
	: UNCHECKED OPEN_PARENS expression CLOSE_PARENS
	;

pointer_member_access 
	: primary_expression OP_PTR IDENTIFIER

unary_expression
	: primary_expression
	| BANG prefixed_unary_expression
	| TILDE prefixed_unary_expression
	| cast_expression
	;

cast_expression
        : OPEN_PARENS expression CLOSE_PARENS unary_expression
        | OPEN_PARENS non_expression_type CLOSE_PARENS prefixed_unary_expression
	;

	//
	// The idea to split this out is from Rhys' grammar
	// to solve the problem with casts.
	//
prefixed_unary_expression
	: unary_expression
	| PLUS prefixed_unary_expression
	| MINUS prefixed_unary_expression 
	| OP_INC prefixed_unary_expression 
	| OP_DEC prefixed_unary_expression 
	| STAR prefixed_unary_expression
	| BITWISE_AND prefixed_unary_expression
	;

pre_increment_expression
	: OP_INC prefixed_unary_expression 
	;

pre_decrement_expression
	: OP_DEC prefixed_unary_expression 
	;

multiplicative_expression
	: prefixed_unary_expression
	| multiplicative_expression STAR prefixed_unary_expression
	| multiplicative_expression DIV prefixed_unary_expression
	| multiplicative_expression PERCENT prefixed_unary_expression 
	;

additive_expression
	: multiplicative_expression
	| additive_expression PLUS multiplicative_expression 
	| additive_expression MINUS multiplicative_expression
	;

shift_expression
	: additive_expression
	| shift_expression OP_SHIFT_LEFT additive_expression
	| shift_expression OP_SHIFT_RIGHT additive_expression
	; 

relational_expression
	: shift_expression
	| relational_expression OP_LT shift_expression
	| relational_expression OP_GT shift_expression
	| relational_expression OP_LE shift_expression
	| relational_expression OP_GE shift_expression
	| relational_expression IS type
	| relational_expression AS type
	;

equality_expression
	: relational_expression
	| equality_expression OP_EQ relational_expression
	| equality_expression OP_NE relational_expression
	; 

and_expression
	: equality_expression
	| and_expression BITWISE_AND equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression CARRET and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression BITWISE_OR exclusive_or_expression
	;

conditional_and_expression
	: inclusive_or_expression
	| conditional_and_expression OP_AND inclusive_or_expression
	;

conditional_or_expression
	: conditional_and_expression
	| conditional_or_expression OP_OR conditional_and_expression
	;

conditional_expression
	: conditional_or_expression
	| conditional_or_expression INTERR expression COLON expression 
	;

assignment_expression
	: prefixed_unary_expression ASSIGN expression
	| prefixed_unary_expression OP_MULT_ASSIGN expression
	| prefixed_unary_expression OP_DIV_ASSIGN expression
	| prefixed_unary_expression OP_MOD_ASSIGN expression
	| prefixed_unary_expression OP_ADD_ASSIGN expression
	| prefixed_unary_expression OP_SUB_ASSIGN expression
	| prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression
	| prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression
	| prefixed_unary_expression OP_AND_ASSIGN expression
	| prefixed_unary_expression OP_OR_ASSIGN expression
	| prefixed_unary_expression OP_XOR_ASSIGN expression
	;

expression
	: conditional_expression
	| assignment_expression
	;

constant_expression
	: expression
	;

boolean_expression
	: expression
	;

//
// 10 classes
//
class_declaration
	: opt_attributes
	  opt_modifiers
	  CLASS IDENTIFIER
	  opt_class_base
          {
		  Types.Push (type);
		  type += (type.Length > 0 ? "." : "") + $4.val.s;
	  }
	  class_body 
	  opt_semicolon
	  {
		  $1.Update ($2);
		  $1.Update ($3);
		  $1.Update ($7);
		  $1.Update ($8);
		  db.AddType (Namespace, type, new Part (fileID, $1));
		  type = (string) Types.Pop ();
	  }
	;	

opt_modifiers
	: /* empty */		{ $$ = new TokenValue (); modStatic = false; }
	| modifiers
          {
		  modStatic = $1.val.s.IndexOf ("static") >= 0;
	  }
	;

modifiers
        : modifier
	| modifiers modifier { $<TokenValue>$.val = $1.val.s + " " + $2.val.s; }
        ;

modifier
	: NEW
	| PUBLIC
	| PROTECTED
	| INTERNAL
	| PRIVATE
	| ABSTRACT
	| SEALED
	| STATIC
	| READONLY
	| VIRTUAL
	| OVERRIDE
	| EXTERN
	| VOLATILE
	| UNSAFE
	;

opt_class_base
	: /* empty */ { $$ = new TokenValue (); }
	| class_base
	;

class_base
	: COLON type_list { $$ = $2; }
	;

//
// Statements (8.2)
//

//
// A block is "contained" on the following places:
//	method_body
//	property_declaration as part of the accessor body (get/set)
//      operator_declaration
//	constructor_declaration
//	destructor_declaration
//	event_declaration as part of add_accessor_declaration or remove_accessor_declaration
//      
block
	: OPEN_BRACE 
	  opt_statement_list CLOSE_BRACE
          {
		  $1.Update ($3);
	  }
	;

opt_statement_list
	: /* empty */
	| statement_list 
	;

statement_list
	: statement
	| statement_list statement
	;

statement
	: declaration_statement
	| embedded_statement
	| labeled_statement
	;

embedded_statement
	: block
	| empty_statement
        | expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement		  
	| try_statement
	| checked_statement
	| unchecked_statement
	| lock_statement
	| using_statement
	| unsafe_statement
	| fixed_statement
	;

empty_statement
	: SEMICOLON
	;

labeled_statement
	: IDENTIFIER COLON 
	  statement
	;

declaration_statement
	: local_variable_declaration SEMICOLON
	| local_constant_declaration SEMICOLON
	;

/* 
 * The following is from Rhys' grammar:
 * > Types in local variable declarations must be recognized as 
 * > expressions to prevent reduce/reduce errors in the grammar.
 * > The expressions are converted into types during semantic analysis.
 */
local_variable_type
	: primary_expression opt_rank_specifier
	| builtin_types opt_rank_specifier
        ;

local_variable_pointer_type
	: primary_expression STAR
        | builtin_types STAR
        | VOID STAR
	| local_variable_pointer_type STAR
        ;

local_variable_declaration
	: local_variable_type variable_declarators
        | local_variable_pointer_type opt_rank_specifier variable_declarators
 	;

local_constant_declaration
	: CONST local_variable_type constant_declarator
	;

expression_statement
	: statement_expression SEMICOLON
	  {
		$$ = $1;
	  }
	;

	//
	// We have to do the wrapping here and not in the case above,
	// because statement_expression is used for example in for_statement
	//
statement_expression
	: invocation_expression
	| object_creation_expression
	| assignment_expression
	| post_increment_expression
	| post_decrement_expression
	| pre_increment_expression
	| pre_decrement_expression
	| error
	;

object_creation_expression
	: object_or_delegate_creation_expression
	  { note ("complain if this is a delegate maybe?"); } 
	;

selection_statement
	: if_statement
	| switch_statement
	; 

if_statement
	: if_statement_open if_statement_rest
	  {
		$$ = $2;
	  }
	;

if_statement_open
	: IF OPEN_PARENS 
	;

if_statement_rest
	: boolean_expression CLOSE_PARENS 
	  embedded_statement
	| boolean_expression CLOSE_PARENS
	  embedded_statement ELSE embedded_statement
	;

switch_statement
	: SWITCH OPEN_PARENS 
	  expression CLOSE_PARENS 
	  switch_block
	;

switch_block
	: OPEN_BRACE
	  opt_switch_sections
	  CLOSE_BRACE
	  {
		$$ = $2;
	  }
	;

opt_switch_sections
	: /* empty */ 		
	| switch_sections
	;

switch_sections
	: switch_section 
	| switch_sections switch_section
	;

switch_section
	: switch_labels
 	  statement_list 
	;

switch_labels
	: switch_label 
	| switch_labels switch_label 
	;

switch_label
	: CASE constant_expression COLON
	| DEFAULT COLON
	| error
	;

iteration_statement
	: while_statement
	| do_statement
	| for_statement
	| foreach_statement
	;

while_statement
	: WHILE OPEN_PARENS 
	boolean_expression CLOSE_PARENS embedded_statement
	;

do_statement
	: DO embedded_statement 
	  WHILE OPEN_PARENS
	  boolean_expression CLOSE_PARENS SEMICOLON
	;

for_statement
	: FOR OPEN_PARENS 
	  opt_for_initializer SEMICOLON
	  opt_for_condition SEMICOLON
	  opt_for_iterator CLOSE_PARENS 
	  embedded_statement
	;

opt_for_initializer
	: /* empty */
	| for_initializer	
	;

for_initializer
	: local_variable_declaration
	| statement_expression_list
	;

opt_for_condition
	: /* empty */
	| boolean_expression
	;

opt_for_iterator
	: /* empty */
	| for_iterator
	;

for_iterator
	: statement_expression_list
	;

statement_expression_list
	: statement_expression	
	| statement_expression_list COMMA statement_expression
	;

foreach_statement
	: FOREACH OPEN_PARENS type IDENTIFIER IN 
	  expression CLOSE_PARENS 
	  embedded_statement 
	;

jump_statement
	: break_statement
	| continue_statement
	| goto_statement
	| return_statement
	| throw_statement
	;

break_statement
	: BREAK SEMICOLON
	;

continue_statement
	: CONTINUE SEMICOLON
	;

goto_statement
	: GOTO IDENTIFIER SEMICOLON 
	| GOTO CASE constant_expression SEMICOLON
	| GOTO DEFAULT SEMICOLON 
	; 

return_statement
	: RETURN opt_expression SEMICOLON
	;

throw_statement
	: THROW opt_expression SEMICOLON
	;

opt_expression
	: /* empty */
	| expression
	;

try_statement
	: TRY block catch_clauses 
	| TRY block opt_catch_clauses FINALLY block
	| TRY block error 
	;

opt_catch_clauses
	: /* empty */  { $$ = null; }
        | catch_clauses
	;

catch_clauses
	: catch_clause 
	| catch_clauses catch_clause
	;

opt_identifier
	: /* empty */	{ $$ = null; }
	| IDENTIFIER
	;

catch_clause 
	: CATCH opt_catch_args 
	block
        ;

opt_catch_args
	: /* empty */ { $$ = null; }
        | catch_args
	;	  

catch_args 
        : OPEN_PARENS type opt_identifier CLOSE_PARENS 
        ;

checked_statement
	: CHECKED block
	;

unchecked_statement
	: UNCHECKED block
	;

unsafe_statement
	: UNSAFE 
	block
	;

fixed_statement
	: FIXED OPEN_PARENS 
	  type fixed_pointer_declarators 
	  CLOSE_PARENS 
	  embedded_statement 
	;

fixed_pointer_declarators
	: fixed_pointer_declarator
	| fixed_pointer_declarators COMMA fixed_pointer_declarator
	;

fixed_pointer_declarator
	: IDENTIFIER ASSIGN expression
	;

lock_statement
	: LOCK OPEN_PARENS expression CLOSE_PARENS 
	  embedded_statement
	;

using_statement
	: USING OPEN_PARENS resource_acquisition CLOSE_PARENS 
	  embedded_statement
	; 

resource_acquisition
	: local_variable_declaration
	| expression
	;

%%

void output (string s)
{
	Console.WriteLine (s);
}

void note (string s)
{
	// Used to put annotations
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (StreamReader reader, string name, ArrayList defines, SourceDB sdb, int FileID)
{
	fileID = FileID;
	lexer = new Tokenizer (reader, name, defines);
	db = sdb;

	Namespaces = new Stack ();
	Namespace = "";

	Types = new Stack ();
	type = "";

	Rows = new Stack ();

	modStatic = false;
}

public override void parse ()
{
	try {
		if (yacc_verbose_flag)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
		// Please do not remove this, it is used during debugging
		// of the grammar
		//
		//Report.Error (-25, lexer.Location, ": Parsing error ");
		Console.WriteLine (e);
	}
}

/* end end end */
}
