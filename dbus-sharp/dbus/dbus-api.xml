<?xml version="1.0"?>
<api>
<!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="DBus" library="dbus-glib-1">
    <enum name="ArgDirection" cname="ArgDirection" type="enum">
      <member cname="ARG_IN" name="In"/>
      <member cname="ARG_OUT" name="Out"/>
    </enum>
    <enum name="GError" cname="DBusGError" type="enum">
      <member cname="DBUS_GERROR_FAILED" name="Failed"/>
    </enum>
    <enum name="InfoType" cname="InfoType" type="enum">
      <member cname="INFO_TYPE_NODE" name="Node"/>
      <member cname="INFO_TYPE_INTERFACE" name="Interface"/>
      <member cname="INFO_TYPE_METHOD" name="Method"/>
      <member cname="INFO_TYPE_SIGNAL" name="Signal"/>
      <member cname="INFO_TYPE_ARG" name="Arg"/>
    </enum>
    <callback name="GProxySignalHandler" cname="DBusGProxySignalHandler">
      <return-type type="void"/>
      <parameters>
        <parameter type="DBusGProxy*" name="proxy"/>
        <parameter type="DBusMessage*" name="signal"/>
        <parameter type="void*" name="user_data"/>
      </parameters>
    </callback>
    <object name="GProxy" cname="DBusGProxy" parent="GObject">
      <signal name="Destroy" cname="destroy" when="CLEANUP">
        <return-type type="void"/>
        <parameters>
          <parameter name="inst" type="DBusGProxy*"/>
        </parameters>
      </signal>
      <signal name="Received" cname="received" when="LAST">
        <return-type type="void"/>
        <parameters>
          <parameter name="inst" type="DBusGProxy*"/>
          <parameter name="p0" type="DbusMessage);"/>
        </parameters>
      </signal>
      <method name="BeginCall" cname="dbus_gproxy_begin_call">
        <return-type type="DBusPendingCall*"/>
        <parameters>
          <parameter type="const-char*" name="method"/>
          <parameter type="int" name="first_arg_type"/>
          <parameter ellipsis="true"/>
        </parameters>
      </method>
      <method name="CallNoReply" cname="dbus_gproxy_call_no_reply">
        <return-type type="void"/>
        <parameters>
          <parameter type="const-char*" name="method"/>
          <parameter type="int" name="first_arg_type"/>
          <parameter ellipsis="true"/>
        </parameters>
      </method>
      <method name="ConnectSignal" cname="dbus_gproxy_connect_signal">
        <return-type type="void"/>
        <parameters>
          <parameter type="const-char*" name="signal_name"/>
          <parameter type="DBusGProxySignalHandler" name="handler"/>
          <parameter type="void*" name="data"/>
          <parameter type="GClosureNotify" name="free_data_func"/>
        </parameters>
      </method>
      <method name="DisconnectSignal" cname="dbus_gproxy_disconnect_signal">
        <return-type type="void"/>
        <parameters>
          <parameter type="const-char*" name="signal_name"/>
          <parameter type="DBusGProxySignalHandler" name="handler"/>
          <parameter type="void*" name="data"/>
        </parameters>
      </method>
      <method name="EndCall" cname="dbus_gproxy_end_call">
        <return-type type="gboolean"/>
        <parameters>
          <parameter type="DBusPendingCall*" name="pending"/>
          <parameter type="GError**" name="error"/>
          <parameter type="int" name="first_arg_type"/>
          <parameter ellipsis="true"/>
        </parameters>
      </method>
      <method name="GetType" cname="dbus_gproxy_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="dbus_gproxy_new_for_peer">
        <parameters>
          <parameter type="DBusConnection*" name="connection"/>
          <parameter type="const-char*" name="path_name"/>
          <parameter type="const-char*" name="interface_name"/>
        </parameters>
      </constructor>
      <constructor cname="dbus_gproxy_new_for_service">
        <parameters>
          <parameter type="DBusConnection*" name="connection"/>
          <parameter type="const-char*" name="service_name"/>
          <parameter type="const-char*" name="path_name"/>
          <parameter type="const-char*" name="interface_name"/>
        </parameters>
      </constructor>
      <constructor cname="dbus_gproxy_new_for_service_owner">
        <parameters>
          <parameter type="DBusConnection*" name="connection"/>
          <parameter type="const-char*" name="service_name"/>
          <parameter type="const-char*" name="path_name"/>
          <parameter type="const-char*" name="interface_name"/>
          <parameter type="GError**" name="error"/>
        </parameters>
      </constructor>
      <method name="Send" cname="dbus_gproxy_send">
        <return-type type="void"/>
        <parameters>
          <parameter type="DBusMessage*" name="message"/>
          <parameter type="dbus_uint32_t*" name="client_serial"/>
        </parameters>
      </method>
    </object>
    <struct name="ArgInfo" cname="ArgInfo" opaque="true">
      <method name="GetDirection" cname="arg_info_get_direction">
        <return-type type="ArgDirection"/>
      </method>
      <method name="GetName" cname="arg_info_get_name">
        <return-type type="const-char*"/>
      </method>
      <method name="GetType" cname="arg_info_get_type">
        <return-type type="int"/>
      </method>
      <constructor cname="arg_info_new">
        <parameters>
          <parameter type="const-char*" name="name"/>
          <parameter type="ArgDirection" name="direction"/>
          <parameter type="int" name="type"/>
        </parameters>
      </constructor>
      <method name="Ref" cname="arg_info_ref">
        <return-type type="void"/>
      </method>
      <method name="Unref" cname="arg_info_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="BaseInfo" cname="BaseInfo" opaque="true">
      <method name="GetGtype" cname="base_info_get_gtype" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetName" cname="base_info_get_name">
        <return-type type="const-char*"/>
      </method>
      <method name="GetType" cname="base_info_get_type">
        <return-type type="InfoType"/>
      </method>
      <method name="Ref" cname="base_info_ref">
        <return-type type="void"/>
      </method>
      <method name="SetName" cname="base_info_set_name">
        <return-type type="void"/>
        <parameters>
          <parameter type="const-char*" name="name"/>
        </parameters>
      </method>
      <method name="Unref" cname="base_info_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="GMethodInfo" cname="DBusGMethodInfo">
      <field cname="function" type="GCallback"/>
      <field cname="marshaller" type="DBusHandleMessageFunction"/>
      <field cname="data_offset" type="int"/>
    </struct>
    <struct name="GObjectInfo" cname="DBusGObjectInfo">
      <field cname="infos" type="const-DBusGMethodInfo*"/>
      <field cname="char* data" type="const-unsigned"/>
      <field cname="dbus_internal_padding1" type="void*"/>
      <field cname="dbus_internal_padding2" type="void*"/>
    </struct>
    <struct name="InterfaceInfo" cname="InterfaceInfo" opaque="true">
      <method name="AddMethod" cname="interface_info_add_method">
        <return-type type="void"/>
        <parameters>
          <parameter type="MethodInfo*" name="method"/>
        </parameters>
      </method>
      <method name="AddSignal" cname="interface_info_add_signal">
        <return-type type="void"/>
        <parameters>
          <parameter type="SignalInfo*" name="signal"/>
        </parameters>
      </method>
      <method name="GetMethods" cname="interface_info_get_methods">
        <return-type type="GSList*"/>
      </method>
      <method name="GetName" cname="interface_info_get_name">
        <return-type type="const-char*"/>
      </method>
      <method name="GetSignals" cname="interface_info_get_signals">
        <return-type type="GSList*"/>
      </method>
      <constructor cname="interface_info_new">
        <parameters>
          <parameter type="const-char*" name="name"/>
        </parameters>
      </constructor>
      <method name="Ref" cname="interface_info_ref">
        <return-type type="void"/>
      </method>
      <method name="Unref" cname="interface_info_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="MethodInfo" cname="MethodInfo" opaque="true">
      <method name="AddArg" cname="method_info_add_arg">
        <return-type type="void"/>
        <parameters>
          <parameter type="ArgInfo*" name="arg"/>
        </parameters>
      </method>
      <method name="GetArgs" cname="method_info_get_args">
        <return-type type="GSList*"/>
      </method>
      <method name="GetName" cname="method_info_get_name">
        <return-type type="const-char*"/>
      </method>
      <constructor cname="method_info_new">
        <parameters>
          <parameter type="const-char*" name="name"/>
        </parameters>
      </constructor>
      <method name="Ref" cname="method_info_ref">
        <return-type type="void"/>
      </method>
      <method name="Unref" cname="method_info_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="NodeInfo" cname="NodeInfo" opaque="true">
      <method name="AddInterface" cname="node_info_add_interface">
        <return-type type="void"/>
        <parameters>
          <parameter type="InterfaceInfo*" name="interface"/>
        </parameters>
      </method>
      <method name="AddNode" cname="node_info_add_node">
        <return-type type="void"/>
        <parameters>
          <parameter type="NodeInfo*" name="child"/>
        </parameters>
      </method>
      <method name="GetInterfaces" cname="node_info_get_interfaces">
        <return-type type="GSList*"/>
      </method>
      <method name="GetName" cname="node_info_get_name">
        <return-type type="const-char*"/>
      </method>
      <method name="GetNodes" cname="node_info_get_nodes">
        <return-type type="GSList*"/>
      </method>
      <constructor cname="node_info_new">
        <parameters>
          <parameter type="const-char*" name="name"/>
        </parameters>
      </constructor>
      <method name="Ref" cname="node_info_ref">
        <return-type type="void"/>
      </method>
      <method name="Unref" cname="node_info_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="Parser" cname="Parser" opaque="true">
      <method name="CheckDoctype" cname="parser_check_doctype">
        <return-type type="gboolean"/>
        <parameters>
          <parameter type="const-char*" name="doctype"/>
          <parameter type="GError**" name="error"/>
        </parameters>
      </method>
      <method name="Content" cname="parser_content">
        <return-type type="gboolean"/>
        <parameters>
          <parameter type="const-char*" name="content"/>
          <parameter type="int" name="len"/>
          <parameter type="GError**" name="error"/>
        </parameters>
      </method>
      <method name="EndElement" cname="parser_end_element">
        <return-type type="gboolean"/>
        <parameters>
          <parameter type="const-char*" name="element_name"/>
          <parameter type="GError**" name="error"/>
        </parameters>
      </method>
      <method name="Finished" cname="parser_finished">
        <return-type type="gboolean"/>
        <parameters>
          <parameter type="GError**" name="error"/>
        </parameters>
      </method>
      <method name="GetNodes" cname="parser_get_nodes">
        <return-type type="NodeInfo*"/>
      </method>
      <constructor cname="parser_new"/>
      <method name="Ref" cname="parser_ref">
        <return-type type="void"/>
      </method>
      <method name="StartElement" cname="parser_start_element">
        <return-type type="gboolean"/>
        <parameters>
          <parameter type="const-char*" name="element_name"/>
          <parameter type="const-char**" name="attribute_names"/>
          <parameter type="const-char**" name="attribute_values"/>
          <parameter type="GError**" name="error"/>
        </parameters>
      </method>
      <method name="Unref" cname="parser_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="SignalInfo" cname="SignalInfo" opaque="true">
      <method name="AddArg" cname="signal_info_add_arg">
        <return-type type="void"/>
        <parameters>
          <parameter type="ArgInfo*" name="arg"/>
        </parameters>
      </method>
      <method name="GetArgs" cname="signal_info_get_args">
        <return-type type="GSList*"/>
      </method>
      <method name="GetName" cname="signal_info_get_name">
        <return-type type="const-char*"/>
      </method>
      <constructor cname="signal_info_new">
        <parameters>
          <parameter type="const-char*" name="name"/>
        </parameters>
      </constructor>
      <method name="Ref" cname="signal_info_ref">
        <return-type type="void"/>
      </method>
      <method name="Unref" cname="signal_info_unref">
        <return-type type="void"/>
      </method>
    </struct>
    <class name="Global" cname="DBusGlobal">
      <method name="BusGetWithGMain" cname="dbus_bus_get_with_g_main" shared="true">
        <return-type type="DBusConnection*"/>
        <parameters>
          <parameter type="DBusBusType" name="type"/>
          <parameter type="GError**" name="error"/>
        </parameters>
      </method>
      <method name="MessageGetGType" cname="dbus_message_get_g_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="ServerSetupWithGMain" cname="dbus_server_setup_with_g_main" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter type="DBusServer*" name="server"/>
          <parameter type="GMainContext*" name="context"/>
        </parameters>
      </method>
      <method name="SetGError" cname="dbus_set_g_error" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter type="GError**" name="gerror"/>
          <parameter type="DBusError*" name="derror"/>
        </parameters>
      </method>
    </class>
    <class name="Connection" cname="DbusConnection_">
      <method name="GetGType" cname="dbus_connection_get_g_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="RegisterGObject" cname="dbus_connection_register_g_object" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter type="DBusConnection*" name="connection"/>
          <parameter type="const-char*" name="at_path"/>
          <parameter type="GObject*" name="object"/>
        </parameters>
      </method>
      <method name="SetupWithGMain" cname="dbus_connection_setup_with_g_main" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter type="DBusConnection*" name="connection"/>
          <parameter type="GMainContext*" name="context"/>
        </parameters>
      </method>
    </class>
    <class name="G" cname="DbusG_">
      <method name="ErrorQuark" cname="dbus_g_error_quark" shared="true">
        <return-type type="GQuark"/>
      </method>
      <method name="ObjectClassInstallInfo" cname="dbus_g_object_class_install_info" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter type="GObjectClass*" name="object_class"/>
          <parameter type="const-DBusGObjectInfo*" name="info"/>
        </parameters>
      </method>
      <method name="ThreadInit" cname="dbus_g_thread_init" shared="true">
        <return-type type="void"/>
      </method>
    </class>
  </namespace>
</api>
