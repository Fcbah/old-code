### Generated by Winemaker; modified for use in mono project


### Generic autoconf variables

TOPSRCDIR             = @top_srcdir@
TOPOBJDIR             = ..
SRCDIR                = @srcdir@
VPATH                 = @srcdir@

DLLS                  = dotnetctl.dll
EXES                  = 




### Common settings

DEFINES               =
INCLUDE_PATH          =
DLL_PATH              =
LIBRARY_PATH          =
LIBRARIES             =

DISTFILES             = ChangeLog dotnetctl.c dotnetctl.dll.spec Makefile.in \
			dotnetctl.h dotnetbutton.c

### dotnetctl.exe sources and settings

dotnetctl_dll_MODULE  = dotnetctl.dll
dotnetctl_dll_BASEMODULE= dotnetctl
dotnetctl_dll_APPMODE =
dotnetctl_dll_C_SRCS  = dotnetctl.c dotnetbutton.c
dotnetctl_dll_CXX_SRCS=
dotnetctl_dll_RC_SRCS =
dotnetctl_dll_SPEC_SRCS= dotnetctl.dll.spec
dotnetctl_dll_DLL_PATH= -L$(WINE_DLL_ROOT)
dotnetctl_dll_DLLS    = advapi32 \
			comdlg32 \
			gdi32 \
			kernel32 \
			odbc32 \
			ole32 \
			oleaut32 \
			shell32 \
			user32 \
			winspool
dotnetctl_dll_LIBRARY_PATH=
dotnetctl_dll_LIBRARIES=
dotnetctl_dll_DEPENDS =

dotnetctl_dll_OBJS    = $(dotnetctl_dll_C_SRCS:.c=.o) \
			$(dotnetctl_dll_CXX_SRCS:.cpp=.o) \
			$(EXTRA_OBJS)



### Global source lists

C_SRCS                = $(dotnetctl_dll_C_SRCS)
CXX_SRCS              = $(dotnetctl_dll_CXX_SRCS)
RC_SRCS               = $(dotnetctl_dll_RC_SRCS)
SPEC_SRCS             = $(dotnetctl_dll_SPEC_SRCS)



### Generic autoconf targets

all: $(DLLS:%=%.so) $(EXES:%=%.so)

@MAKE_RULES@

install::
	_list="$(EXES:%=%.so) $(DLLS:%=%.so)"; for i in $$_list; do $(INSTALL_PROGRAM) $$i $(dlldir); done

uninstall::
	_list="$(EXES:%=%.so) $(DLLS:%=%.so)"; for i in $$_list; do $(RM) $(dlldir)/$$i;done

### Target specific build rules

$(dotnetctl_dll_MODULE).spec.c: $(dotnetctl_dll_SPEC_SRCS) $(dotnetctl_dll_RC_SRCS:.rc=.res) $(dotnetctl_dll_OBJS)
	$(LDPATH) $(WINEBUILD) -fPIC -o $@  $(dotnetctl_dll_SPEC_SRCS:%=--spec $(SRCDIR)/%) $(dotnetctl_dll_RC_SRCS:%.rc=%.res) $(dotnetctl_dll_OBJS) $(dotnetctl_dll_DLL_PATH) $(WINE_DLL_PATH) $(GLOBAL_DLL_PATH) $(dotnetctl_dll_DLLS:%=-l%) $(GLOBAL_DLLS:%=-l%)

$(dotnetctl_dll_MODULE).so: $(dotnetctl_dll_MODULE).spec.o $(dotnetctl_dll_OBJS) $(dotnetctl_dll_DEPENDS)
	$(LDSHARED) $(LDDLLFLAGS) -o $@ $(dotnetctl_dll_OBJS) $(dotnetctl_dll_MODULE).spec.o $(dotnetctl_dll_LIBRARY_PATH) $(ALL_LIBRARY_PATH) $(dotnetctl_dll_LIBRARIES:%=-l%) $(ALL_LIBRARIES) $(LIBS)

top_distdir = ..
distdir = $(top_distdir)/@PACKAGE_TARNAME@-@PACKAGE_VERSION@

distdir:
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
		case $$file in \
			$(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
			$(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
		esac; \
		if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
		dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
		if test "$$dir" != "$$file" && test "$$dir" != "."; then \
			dir="/$$dir"; \
			$(mkinstalldirs) "$(distdir)$$dir"; \
		else \
			dir=''; \
		fi; \
		if test -d $$d/$$file; then \
			if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
				cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
			fi; \
			cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
		else \
			test -f $(distdir)/$$file \
			|| cp -p $$d/$$file $(distdir)/$$file \
			|| exit 1; \
		fi; \
	done
