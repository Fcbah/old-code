<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:monodoc="http://www.go-mono.org/xml/monodoc">
<head>
	<title>Linux Developers: getting started</title>
	<meta name = "DC.Description" content = "" />

	<meta name = "DC.Contributor" content = "Johannes Roith" />
	<meta name = "DC.Contributor" content = "Jaime Anguiano Olarra" />
	<meta name = "DC.Contributor" content = "Hinne Hettema" />
	<meta name = "DC.Contributor" content = "Martin Willemoes Hansen" />
	<meta name = "DC.Contributor" content = "Shane Landrum" />
	<link rel="stylesheet" type="text/css" href="../style.css" />
	<link rel="stylesheet" type="text/css" href="style.css" />
</head>
<body>

<h2> Contents</h2>
<ol>
<li> <a href="#lin-binary">Linux Binary Installation</a></li>

<li> <a href="#source">Build from Source</a> </li>

<li> <a href="#kernel_support">Running .EXE Binaries with Mono</a></li>

</ol>
<a name="lin-binary"></a>
<h2>Linux Binary Installation</h2>

<p>
  Mono is available in various forms: through the <a
  href="http://www.novell.com/products/desktop/update.html">Red
  Carpet</a> installation software, or as packages that you can
  install.  From Red Carpet, just subscribe to the `Mono Channel' and
  select all the Mono packages and install
</p>

<p>
  If you choose to install the packages yourself, go to the Mono dowload page at <a
  href="http://www.go-mono.org/download.html">http://www.go-mono.org/download.html</a>
  and select the distribution you are running on.
</p>
 
<p>
  Packages are split up by functionality, download all the packages
  for the functionality you require.  If you are experimenting for the
  first time, we suggest that you download the zip file that contains
  all of the individual packages (they are in the file `mono-all.zip').

</p>

<p>
  If you choose the `mono-all.zip' file, you must decompress the archive first:
</p>

<pre class="console">

    $ unzip mono-all.zip

</pre>

<p>
  To install, just use the rpm command as the root user:
</p>

<pre class="console">

    # rpm -Uvh *rpm

</pre>

<p>
   Repositories for Debian and Yum are linked from that page.
</p>

<blockquote>
<p>
<b>To Run Mono Applications:</b> If you want to run simple .NET
applications, install the packages "mono" and "libgc."  
</p>

<p>
<b>To Run GNOME Applications that use Mono:</b> If you want to run GNOME
applications that take advantage of .NET technologies, install gtk-sharp,
libgda, and libgnomedb.
</p>

<p>
<b>To Develop Mono Applications:</b> To develop Mono applications, install both
the plain and the "devel" versions of the Mono and Gtk# packages. The "monodoc"
documentation system is also recommended.
</p>

<p><b>To Develop Web Applications:</b>If you want to build web applications, 
  you'll need to install XSP, Apache, and mod_mono. XSP is a lightweight 
  webserver that hosts the System.Web classes for ASP.NET; mod_mono is a
  module for the Apache 1.3 and 2.0 series.</p>


</blockquote>


<a name="source" id="source"></a> <h2>Building Mono from Source</h2>


<p>
In order to compile Mono, Linux users will need:
</p>
<ul>
<li> The pkg-config utility.</li>
<li> The library glib 1.3 or later</li>
<li> A tarball of the "mono" package from <a href="http://www.go-mono.com/download.html" target="_top">the mono download page</a>.</li>
<li> GNU autoconf and automake build tools.</li>
</ul>

<ol>

 <li> 

Unzip the tarball to some useful location. It contains two
directories, "mono-[version]" and "mcs-[version]."  The
"mono-[version]" directory is the runtime environment, and is the
first one you should compile.  </li>

<li>Change to the mono-* directory and run the  "./configure" command.  You
should see output like this:

<pre class="console">
    # ./configure
    loading cache ./config.cache
    checking host system type... i686-pc-linux-gnu
    checking target system type... i686-pc-linux-gnu
    checking build system type... i686-pc-linux-gnu
    checking for a BSD compatible install... (cached) /usr/bin/install
    -c
    checking whether build environment is sane... yes
    checking whether make sets ${MAKE}... (cached) yes
    checking for working aclocal... found
    </pre>

</li>

<li> Once the configure process completes successfully (it may take several
minutes) enter the "make" command. As before, you will see extensive output, which you can mostly ignore unless make fails. It should look somewhat like this:

<pre class="console">

    # make

</pre>
</li>

<li>
Finally, become root with the "su" command and run "make install" to finish the
installation process.  This last command copies the executables into the right
places, typically /usr/local/bin.
</li>

<p>If you want to build web applications, you'll need to download and build
  XSP (xsp-someversion.tar.gz) at the minimum, and you'll probably want mod_mono
  (mod_mono-someversion.tar.gz) and a current Apache built from source. 
  Follow the instructions in their INSTALL files; XSP builds similarly to 
  mono and mcs, while mod_mono builds much like any other Apache module.
</p>

</ol>


<h2>
<a name="kernel_support" id="kernel_support">Running .EXE Binaries</a>
</h2>

<p>
The normal way to run an application you have compiled with Mono would be to
invoke it through the Mono runtime, like this:
</p>

<pre class="console">
mono myprogram.exe
</pre>

   <p>
     However, there are two things you can do to make it more
     convenient to run Mono applications. The first is to use a shell
     script instead of the EXE file. For example, if you had
     "myprogram.exe" you could create a shell script called
     "myprogram" that had the contents:
     <pre class="console">
       #!/bin/sh
       /usr/bin/mono /usr/bin/myprogram.exe "$@"
     </pre>
     When you run "myprogram," the shell will replace $@ with any arguments you
     provided.
   </p>

   <p>
     If you installed mono to a different location, substitute that for
     /usr/bin/mono. You can check with the "which mono" command.
   </p>
   <p> 
     You can also make a systemwide change, and use binfmt to register
     the exe files as non-native binaries. Then, when trying to launch an
     exe file, the kernel will run the mono interpreter to handle the
     command. Binfmt can also be used to launch Windows executables using WINE,
     or Java .class files using a JVM. To register exe with the kernel:
   </p>
<ol>
<li>Become root and turn on the binfmt module in your kernel with this command:
<pre class="console">
 modprobe binfmt
</pre>
In addition, you may want to add that command to your /etc/rc.local boot script, so
that it will be executed on boot.
</li>


<li>Add the line below to your /etc/fstab file:
<br />
<pre class="console">
binfmt_misc /proc/sys/fs/binfmt_misc binfmt_misc none
</pre></li>
<li>
Then, have your system run the following command on boot:
  <br />
<pre class="console">
echo ':CLR:M::MZ::/usr/bin/mono:' &gt; /proc/sys/fs/binfmt_misc/register
</pre></li>
<li>Be sure to mark your .exe files as executable in the filesystem as well:<br />
<pre class="console">chmod +x myprogram.exe</pre></li>
</ol>

<p>
  Note that this doesn't change your kernel, just the modules that it loads
  when you boot your system. In other words, you can still upgrade your kernel 
  without worrying about losing these changes. Similarly, you can upgrade your
  Mono runtime without affecting any of the invocation methods listed in this section.
</p>


</body>
</html>


</body>
</html>
