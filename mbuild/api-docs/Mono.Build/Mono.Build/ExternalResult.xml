<Type Name="ExternalResult" FullName="Mono.Build.ExternalResult">
  <TypeSignature Language="C#" Value="public abstract class ExternalResult : Mono.Build.Result, IFingerprintable, ICloneable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>Mono.Build</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 11 00 00 00 F5 C4 9D D0 0C 3C 7B 78 63 91 17 5B 7D F6 FD 4A A9 50 31 82 44 76 CF D8 68 14 88 FD C8 8F 0F 8D 0F FE B2 24 19 8D F2 C1 9F 2F 14 C8 B5 47 12 08 FD A2 C5 F9 60 77 91 22 44 72 9D 61 96 65 EE 38 88 EA 48 A6 D4 66 4A 4A 8A 6A F9 B4 4D 2D 62 51 97 7D F9 0D AD 80 DC EE E9 66 C7 F3 B5 8C 89 27 5E 02 F6 8B 15 67 70 36 ED B7 53 2E 70 B1 98 04 39 2C D6 EE 3C 18 D0 76 4D 66 68 2B D6 A3 AC AB]</AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>A result that references data stored externally to the build system.</summary>
    <remarks>
      <see cref="T:Mono.Build.ExternalResult" /> is the superclass of results that are stored externally to the build system. The actual subclass should store the information necessary to access the external resource; usually this access will require information provided from a <see cref="T:Mono.Build.IBuildContext" />.

<para>The prototypical ExternalResult is <see cref="T:Mono.Build.MBFile" />, which points to a file on the filesystem. When serialized, the path to the file is stored but the file itself is not serialized into the stream. (There are build systems that work this way!) Actually, it's worth noting that the full path to the filename isn't stored; what's actually recorded is the path relative to a value of the <see cref="Mono.Build.ExternalResultKind" /> enumeration. This abstraction allows MBuild to implement out-of-place builds in a relatively painless manner.
</para></remarks>
  </Docs>
  <Base>
    <BaseTypeName>Mono.Build.Result</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Mono.Build.IFingerprintable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Check">
      <MemberSignature Language="C#" Value="public virtual bool Check (Mono.Build.IBuildContext ctxt);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctxt" Type="Mono.Build.IBuildContext" />
      </Parameters>
      <Docs>
        <summary>Check if the external resource reference is still valid.</summary>
        <param name="ctxt">A <see cref="T:Mono.Build.IBuildContext" /> used to access the external resource.</param>
        <returns>True if the reference to the external resource is still valid. False if it is not (for example, the ExternalResult points to file that was deleted behind MBuild's back.)</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public virtual void Clean (Mono.Build.IBuildContext ctxt);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctxt" Type="Mono.Build.IBuildContext" />
      </Parameters>
      <Docs>
        <summary>Delete the external resource.</summary>
        <param name="ctxt">A <see cref="T:Mono.Build.IBuildContext" /> used to access the external resource.</param>
        <remarks>This should delete the external resource; further references to it should fail. For example, if the external resource is a file, this should simply delete the file from the filesystem.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DistClone">
      <MemberSignature Language="C#" Value="public virtual void DistClone (Mono.Build.IBuildContext ctxt);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctxt" Type="Mono.Build.IBuildContext" />
      </Parameters>
      <Docs>
        <summary>Create a distributable copy of the external data this result represents.</summary>
        <param name="ctxt">A <see cref="T:Mono.Build.IBuildContext" /> used to determine where the clone should be created. See <see cref="M:Mono.Build.IBuildContext.DistPath" />.</param>
        <remarks>Note that this should duplicate the external resource, not just the internal object referencing it. So this function should physically copy the file to a new location on disk, if the external resource is stored in a file.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExternalResult ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:Mono.Build.ExternalResult" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public virtual Mono.Build.ExternalResultKind Kind { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Build.ExternalResultKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The generalized location in which this result may be found.</summary>
        <returns>a <see cref="T:Mono.Build.ExternalResultKind" /></returns>
        <remarks>See <see cref="T:Mono.Build.ExternalResultKind" /> for more information on the meaning of the various values of this property.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>