<Type Name="ITagged" FullName="Mono.Build.ITagged">
  <TypeSignature Language="C#" Value="public abstract interface ITagged" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>Mono.Build</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 11 00 00 00 F5 C4 9D D0 0C 3C 7B 78 63 91 17 5B 7D F6 FD 4A A9 50 31 82 44 76 CF D8 68 14 88 FD C8 8F 0F 8D 0F FE B2 24 19 8D F2 C1 9F 2F 14 C8 B5 47 12 08 FD A2 C5 F9 60 77 91 22 44 72 9D 61 96 65 EE 38 88 EA 48 A6 D4 66 4A 4A 8A 6A F9 B4 4D 2D 62 51 97 7D F9 0D AD 80 DC EE E9 66 C7 F3 B5 8C 89 27 5E 02 F6 8B 15 67 70 36 ED B7 53 2E 70 B1 98 04 39 2C D6 EE 3C 18 D0 76 4D 66 68 2B D6 A3 AC AB]</AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Represents an object that is tagged with metadata.</summary>
    <remarks>Represents an object that is marked with "tags". Tags are essentially metadata: they are <see cref="T:Mono.Build.Result" />s identified by <see cref="T:System.String" /> identifiers. Some tag names have special meaning to the build system, but any name can be used to identify a tag.</remarks>
  </Docs>
  <Base />
  <Interfaces />
  <Attributes />
  <Members>
    <Member MemberName="HasTag">
      <MemberSignature Language="C#" Value="public virtual bool HasTag (string tag);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Returns true if the object has contains the named tag.</summary>
        <param name="tag">The name of the tag to query.</param>
        <returns>True if the object is marked with the named tag; false otherwise.</returns>
        <remarks>This function does not distinguish between "constant" tags, which do not depend on any outside properties of the build, and "delay" tags, which get their value from the value of another target.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTagValue">
      <MemberSignature Language="C#" Value="public virtual Mono.Build.Result GetTagValue (string tag, Mono.Build.IBuildManager manager);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Build.Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="manager" Type="Mono.Build.IBuildManager" />
      </Parameters>
      <Docs>
        <summary>Get the value of a tag, building a dependent result if necessary.</summary>
        <param name="tag">The name of the tag to retrieve.</param>
        <param name="manager">A <see cref="T:Mono.Build.IBuildManager" /> that will be used to evaluate the value of the tag if it is a "delay" tag; that is, if its value is the value of another target, not a hardcoded <see cref="T:Mono.Build.Result" />.</param>
        <returns>The value of the tag.</returns>
        <remarks>This function may cause targets to be built if the value of the tag is defined to be the value of another target.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>