A list of tags that have reserved / special meanings to mbuild

config -- the target is a configuration option. It should have
       whatever other tags are required to present the user with a
       sane prompt asking them to choose a value. Configuration options
       *always* have a default, and hopefully that default will be the 
       sensible one. The config_group tag could just become this tag,
       with the presence of a string value indicating that the target
       should be configurable.

prompt -- On config items, a string with a prompt to ask the user to
       enter a new value for the item. The grammatical form that the
       prompt should take is still up in the air :-(

config_group -- a rough grouping of what kind of configuration item this
	is. Just to help configuration code. String-valued. Current examples:
	"Debugging", "Installation", "Main". This could just replace the
	'config' tag.

default -- the target is one of the goals of a default build. IE, it would
	be generated by a 'make all' if we were using make.

prereq -- the target represents some sort of external resource required to
       perform the build. For example, the target is a BinaryInfo representing
       some external build. So 'mbuild -Ug +prereq' will do the equivalent of
       a './config.status --recheck': it will clear the cached values for these
       targets so that they will be regenerated on the next build. Note that 
       this is somewhat degenerate with 'config'.

install -- points to an Installer result that will be used to install the result.
	This is so damn clever.

environment_bind -- The target can derive its value from an environment variable;
	the variable to get the value from should be this tag's (string) value.
	The target should be compatible with MBString. The build tool should only
	check the environment variable when explicitly instructed to do so; otherwise
	the build might not be reproduced correctly if an environment variable is
	unintentionally changed between builds.

	Example: cc_names = "!gcc cc" with { "environment_bind" = "CC" }. On init,
	if CC="distcc gcc", that value is used as the CC program.

config_endpoint -- This is a tentative idea. See the 12/26/06 TODO item.
